TITLE:: ColorMap
summary:: Create and access alternative color palettes.
categories:: Tools, GUI, FonaDyn
related:: Classes/Color, Classes/FonaDyn, Classes/VRPMetric

DESCRIPTION::
ColorMap loads and holds an arbitrary color-map table, and returns several palettes referencing that table. This can be used to implement color mappings suitable for color-blind viewers, for example. The palette functions take  one float argument 0...1, where 0 will return the first (minimum-value) color in the map, and 1 will return the last (maximum-value) color.

CLASSMETHODS::

METHOD:: new
Instantiates a new ColorMap object, but does not do anything else.

ARGUMENT:: type
(not used)

returns:: a ColorMap object

METHOD:: setDefaultPath
A String that specifies the default folder path for where to find color tables and color-set files.

ARGUMENT:: path
The path to the folder where ColorMap should look for its data files. If this is not set, the full path to each file must be given.



INSTANCEMETHODS::

METHOD:: load
Loads a text file that is assumed to contain a color-map. Each line should contain three float values between 0 and 1, specifying the red, green and blue components of a color. The column separator can be either semicolon or comma, but not mixed in the same file. There must be at least two colors in the table. Tables larger than 256 colors are not really meaningful to the eye. Lines not starting with a decimal digit are instead output to the Post window as comments, for instance, as a copyright notice. The strong::first:: line must contain three items, so if you put the comment there, its text must also include two column separator characters.

ARGUMENT:: csvPath
A String with the file name of the csv file. If no path is given, ColorMap will look in the folder that was specified using strong::setDefaultPath::.

ARGUMENT:: bPostHead
If strong::true::, then some info about the color map will be posted when the interpreter is booted. Defaults to strong::false::.

returns:: an integer with the number of lines successfully interpreted as RGB color values. A return value of zero indicates that the file did not contain a color map table.

METHOD:: rawPaletteFunc
Creates a palette function that simply indexes into the loaded table and returns the nearest color.

returns:: a Function that takes one float argument 0...1 and returns a color. The argument indicates the relative position in the loaded table. This works best with long color tables of, say, 100 colors or more.

METHOD:: smoothPaletteFunc
Creates a palette that indexes the passed value into the loaded table and blends adjacent colors to intermediate colors. This works best with short color tables of, say, 5-20 colors.

returns:: a Function that takes one float argument 0...1 and returns a color.

METHOD:: steppedPaletteFunc
Creates a palette with strong::nSteps:: colors. If the preloaded table contains strong::nSteps:: or more colors, the returned palette function returns the exact color from the first strong::nSteps:: entries in the color map. This is intended for situations in which a small number of possible colors are known beforehand. If strong::nSteps:: is greater than the number of entries in the color map, the returned palette function blends the sequence of colormap entries into a set of strong::nSteps:: colors.

ARGUMENT:: nSteps
The desired number of colors to create from the preloaded color map table.

returns:: a Function that takes one float argument 0...1 and returns a color.

METHOD:: colorCount

returns:: the number of colors in the currently loaded color map table.


EXAMPLES::

code::

ColorMap.setDefaultPath(Platform.userExtensionDir +/+ "FonaDynTools/colormaps");

var colorCVD, myPalette, theColor;
colorCVD = ColorMap.new(); 			// Create the ColorMap instance
colorCVD.load("viridis256.csv"); 	// Have it load a color-map table
myPalette = colorCVD.rawPalette;	// Use it to create a palette function
theColor = myPalette.(0.5); 		// Use the palette function to create a Color
::
